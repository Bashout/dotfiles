" Vim Configuration File (~/.vimrc)
" =================================

" Brief help
" ----------
" :PluginInstall    - Install new plugins
" :PluginClean      - Remove unused plugins
" :PluginUpgrade    - Update installed plugins
" :mks[ession] path - Create a session
" :so[urce] path    - Load a session or Vim Script

" Dependencies:
"   LaTeX:  latexmk & pdflatex
"   Perl:   perl (& Vi::QuickFix)
"   Shell:  shellcheck
"   Clangs: clang-tidy (-checks=* ???), clang, gcc, gcc-c++ (g++)
"   Python: pylint
"   Build:  make, cmake, etc
"   Tags:   ctags

" Initial Config

" Make sure the file is readable
if !1 | finish | endif

" Encoding
scriptencoding utf-8
set encoding=utf-8
set fileencoding=utf-8


" Plugin Setup
if has('nvim')
    if !filereadable(expand($HOME . '/.config/nvim/pack/vivid/opt/Vivid.vim/autoload/vivid.vim'))
        silent !git clone https://github.com/axvr/Vivid.vim.git ~/.config/nvim/pack/vivid/opt/Vivid.vim
    endif
else
    if !filereadable(expand($HOME . '/.vim/pack/vivid/opt/Vivid.vim/autoload/vivid.vim'))
        silent !git clone https://github.com/axvr/Vivid.vim.git ~/.vim/pack/vivid/opt/Vivid.vim
    endif
endif

if has('vim_starting')
    packadd Vivid.vim
endif


" Input Plugins below this line {{{

" Vim enhancements
Plugin 'rhysd/clever-f.vim',   { 'enabled': 1, }
Plugin 'jiangmiao/auto-pairs', { 'enabled': 1, }
Plugin 'tommcdo/vim-lion',     { 'enabled': 1, }
Plugin 'wellle/targets.vim',   { 'enabled': 1, }
Plugin 'romainl/vim-cool',     { 'enabled': 1, }
Plugin 'romainl/vim-qf',       { 'enabled': 1, }
Plugin 'justinmk/vim-dirvish', { 'enabled': 1, }
Plugin 'christoomey/vim-tmux-navigator'
packadd matchit

" Git integration
Plugin 'tpope/vim-fugitive'
Plugin 'rhysd/committia.vim'
Plugin 'airblade/vim-gitgutter'

" Syntax highlighting packs & code formatting
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'rust-lang/rust.vim'
Plugin 'rhysd/vim-clang-format'

" Colour schemes and themes
Plugin 'liuchengxu/space-vim-dark', { 'enabled': 1, }

" Input Plugins above this line }}}


" Git Plugin Enabling
function! s:enable_git_plugins() abort
    if system('git rev-parse --is-inside-work-tree') =~# '\m\C^true'
        call vivid#enable('vim-fugitive', 'committia', 'vim-gitgutter')
    endif
endfunction

augroup plugins
    autocmd!
    autocmd BufReadPre * call s:enable_git_plugins()
augroup END


" Basic Configuration

" Essentials
filetype plugin indent on
if !exists('g:syntax_on')
    syntax enable
endif
"set hidden

" Searching
set ignorecase      " Ignore case in searches
set smartcase       " Enables smart case mode
set hlsearch        " Highlight all search results
set incsearch       " Searches for strings incrementaly
set wrapscan        " Wrap back to the start of the file

" Mode line
set modeline        " Allow reading modelines
set modelines=5     " Set the number of lines to search through to find modeline

" Backup, Swap & Undo files  {{{
let s:dirs = ['', '', '']
if has('nvim')
    let s:dirs[0] = expand($HOME . '/.config/nvim/backup')
    let s:dirs[1] = expand($HOME . '/.config/nvim/swap')
    let s:dirs[2] = expand($HOME . '/.config/nvim/undo')
else
    let s:dirs[0] = expand($HOME . '/.vim/backup')
    let s:dirs[1] = expand($HOME . '/.vim/swap')
    let s:dirs[2] = expand($HOME . '/.vim/undo')
    set viminfo+=n~/.vim/viminfo
endif
for s:dir in s:dirs
    if !isdirectory(s:dir)
        call mkdir(s:dir, 'p')
    endif
endfor
let &backupdir = s:dirs[0]
set backup
let &directory = s:dirs[1]
if has('persistent_undo')
    let &undodir = s:dirs[2]
    set undofile
else
    set undolevels=1000
endif
unlet s:dirs " }}}

set autoread
set confirm
set fileformats=unix,mac,dos
set mouse=a
set backspace=indent,eol,start
set spelllang=en_gb
set history=200
set lazyredraw
set showmatch
set foldenable
set foldmethod=marker

" Vim & GVim styling
set number relativenumber
set ruler
set showcmd
set laststatus=2
set cursorline          " Highlight current line
let &colorcolumn=join(range(81,335), ',')
set visualbell t_vb=    " Disable sound & visual alerts
set showmode
" TODO localise this function
function! GitBranch() abort
    if vivid#enabled('vim-fugitive') && fugitive#head() != ''
        return '  ' . fugitive#head() . ' '
    else | return ''
    endif
endfunction
set statusline=%#LineNr#%{GitBranch()}      " Git branch name
set statusline+=%#StatusLine#\ %f%m%r%h%w   " Current file info
set statusline+=%=                          " Move to rightside of screen
set statusline+=%{&ff}\ \|
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}\ \|
set statusline+=\ %{&filetype}\ \|
set statusline+=\ %P\ \|
set statusline+=\ %2v\                      " Vim ruler config

set background=dark
colorscheme space-vim-dark
" TODO check if terminal is compatible
highlight Comment cterm=italic
"highlight Normal guibg=NONE ctermbg=NONE
if has('gui_running')
    set guifont=Monospace\ 11
elseif !has('gui_running')
    set t_Co=256
endif
if has('termguicolors')
    " TODO check if terminal is compatible
    set termguicolors
    "set t_Co=256
endif

" Vim Omnicomplete, Ins-complete & Wild menu
set omnifunc=syntaxcomplete#Complete
set wildmenu
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite,errors.err
set path+=**


" Set Keymaps & Commands

" TODO set up dirvish
" Git keybindings
nnoremap <leader>gs :<C-u>Gstatus<CR>
nnoremap <leader>gc :<C-u>Gcommit<CR>
nnoremap <leader>gd :<C-u>Gdiff<CR>
nnoremap <leader>gb :<C-u>Gblame<CR>
nnoremap <F7> :<C-u>setlocal spell!<CR>
" Make tags file using ctags TODO add more options
command! -nargs=0 MakeTags !ctags -R .
" Clang format
autocmd FileType c,h,cpp,hpp,cc,objc
            \ nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,h,cpp,hpp,cc,objc
            \ vnoremap <buffer><Leader>cf :ClangFormat<CR>
autocmd FileType c,h,cpp,hpp,cc,objc xnoremap <buffer>= :ClangFormat<CR>

" Remove trailing whitespace
function! s:trim(bang) abort
    if a:bang || (!&binary && &filetype != 'diff')
        normal! mz
        normal! Hmy
        %s/\m\C\s\+$//e
        normal! 'yz<CR>
        normal! `z
    else | echoerr 'Warning! Not reccommended to trim whitespace in this file.'
    endif
endfunction
command! -nargs=0 -bar -bang Trim call <SID>trim('!' == '<bang>')

" Show Highlighting group for current word
function! s:syn_stack()
    if !exists('*synstack') | return | endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction
nnoremap <leader>hg :call <SID>syn_stack()<CR>

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX files.
" TODO replace existing vim modeline
function! AppendModeline()
    let l:modeline = printf(' vim: set ts=%d sw=%d tw=%d %set ft=%s fdm=%s ' .
                \ 'fmr=%s :',
                \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no',
                \ &filetype, &foldmethod, &foldmarker)
    let l:modeline = substitute(&commentstring, '%s', l:modeline, '')
    call append(line('$'), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :<C-u>call AppendModeline()<CR>

" Git stage file
function! s:git_add(fname) abort
    if !filereadable(a:fname)
        echoerr 'File is not readable'
        return
    endif
    execute 'lcd' fnamemodify(a:fname, ':h')
    let result = system('git add '.a:fname)
    if v:shell_error
        echoerr 'failed to stage: '.result
    else
        echo fnamemodify(a:fname, ':t') . ' was staged'
    endif
endfunction
command! -nargs=0 -bar Gadd call <SID>git_add(expand('%:p'))
nnoremap <silent><Leader>ga :<C-u>Gadd<CR>


" Plugin Configuration

" Lion Config
let g:lion_squeeze_spaces = 1

" Clever-f Config
let g:clever_f_smart_case     = 1
let g:clever_f_across_no_line = 1

" Clang Format Config
let g:clang_format#code_style = 'google'
let g:clang_format#detect_style_file = 1


" File Specific Config
" --------------------

" Indentation Config (Spaces > Tabs)
set tabstop=8       " ts  -- Don't change this value
set softtabstop=4   " sts -- Number of spaces = to a tab
set shiftwidth=4    " sw  -- Number of sapces used for indenting
set expandtab       " et  -- Change tabs into spaces
set shiftround      " sr  -- Round indent to multiple of sw
set autoindent      " ai  -- Enable unintrusive auto-indentation

" Line wrap config (Use soft wrap, and manually hard wrap text)
let &showbreak='>>> '   " Prefix for soft wrapped line
set textwidth=80        " Maximum width of text
set wrapmargin=0        " Set wrap margin on right of screen
set wrap                " Enable line wrap
set linebreak           " Breaks lines at words
set nolist              " List disables linebreak


" Clang Files
augroup clang
    autocmd!
    autocmd FileType c,h,cpp,hpp,cc,objc call vivid#enable('vim-clang-format',
                \ 'vim-cpp-enhanced-highlight')
augroup END

" Perl files
augroup perl
    autocmd!
    autocmd FileType perl setlocal makeprg=perl\ -c\ -MVi::QuickFix\ %
    autocmd FileType perl setlocal errorformat+=%m\ at\ %f\ line\ %l\.
    autocmd FileType perl setlocal errorformat+=%m\ at\ %f\ line\ %l
augroup END

" Shell files
augroup shell
    autocmd!
    autocmd FileType sh setlocal makeprg=shellcheck\ -f\ gcc\ %
augroup END

" LaTeX files
augroup tex
    autocmd!
    autocmd FileType tex setlocal makeprg=latexmk\ -pdf\ %
augroup END

" Text Files (text, tex, markdown, org, gitcommit, diff)
augroup text
    autocmd!
    " Set soft wrap for text files
    autocmd FileType text,tex,markdown,gitcommit,html,css setlocal spell
    autocmd FileType text,tex,markdown,gitcommit,diff setlocal nofoldenable

    if exists('+breakindent')
        autocmd FileType text,tex,markdown,gitcommit,diff,html,css
                    \ setlocal breakindent
    endif

    autocmd FileType text,tex,markdown,gitcommit,html,css let &l:colorcolumn=0
    autocmd FileType diff let &colorcolumn=join(range(82,335), ',')
    autocmd FileType text,tex,markdown,diff setlocal number norelativenumber
    autocmd FileType gitcommit setlocal nonumber norelativenumber
augroup END

" Binary Files
" Change Vim into a hex editor
augroup binary " {{{
    autocmd!
    autocmd BufReadPre   *.bin let &bin=1
    autocmd BufReadPost  *.bin if &bin | %!xxd
    autocmd BufReadPost  *.bin set ft=xxd | endif
    autocmd BufWritePre  *.bin if &bin | %!xxd -r
    autocmd BufWritePre  *.bin endif
    autocmd BufWritePost *.bin if &bin | %!xxd
    autocmd BufWritePost *.bin set nomod | endif
augroup END " }}}

" GPG Encrypted Files
" Transparent editing of gpg encrypted files. By Wouter Hanegraaff.
augroup encrypted  " {{{
    autocmd!

    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp set viminfo=
    " We don't want a various options which write unencrypted data to disk
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp
                \ set noswapfile noundofile nobackup

    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp set bin
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp let ch_save = &ch|set ch=2
    " (If you use tcsh, you may need to alter this line.)
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp
                \ '[,']!gpg --decrypt 2> /dev/null

    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp set nobin
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp
                \ let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp
                \ execute ':doautocmd BufReadPost ' . expand('%:r')

    " Convert all text to encrypted text before writing
    " (If you use tcsh, you may need to alter this line.)
    autocmd BufWritePre,FileWritePre *.gpg,*.asc,*.pgp
                \ '[,']!gpg --default-recipient-self -ae 2>/dev/null
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost *.gpg,*.asc,*.pgp u
augroup END  " }}}


" vim: set ts=8 sw=4 tw=80 et ft=vim fdm=marker fmr={{{,}}} :
