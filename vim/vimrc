" Vim Configuration File (~/.vimrc)
" =================================

" Brief help
" ----------
" :PluginInstall    - Install new plugins
" :PluginClean      - Remove unused plugins
" :PluginUpgrade    - Update installed plugins
" :source $MYVIMRC  - Load latest version of '$MYVIMRC'

" -----------------------------------------------------------------------------
" TODO indentation
" TODO built in vim linting
" TODO set up mucomplete
" TODO fuzzy file finder (maybe use default vim settings)
" TODO Auto-complete for all languages wanted
" TODO improve Vim buffers (similar to SM)
" TODO improve Vim vimrc
" TODO spelling fix / correction keymap (maybe list corrections)
" TODO tidy up this document
" TODO lightline space-vim theme
" TODO replace some neovim plugins with stock vim features
"
" Languages still to optimise for
" * C
" * Rust
" * Python
" * Java
" * JavaScript
" * HTML
" * CSS
" * & many more
" -----------------------------------------------------------------------------

" Make sure the file is readable
if !1 | finish | endif

if &compatible
    set nocompatible
endif

" Make vim and neovim use same info (e.g. undo & swap files)
" TODO full neovim compatibility with different plugins
let s:unify = 0
" TODO nvim use regular vim conf
let s:minimal_nvim = 0

" Encoding
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

function! s:get_SID()
    return matchstr(expand('<sfile>'), '<SNR>\d\+_zeget_SID$')
endfunction
let s:SID = s:get_SID()
delfunction s:get_SID


" -----------------------------------------------------------------------------

" Plugin Setup
" ------------

if !filereadable(expand($HOME . '/.vim/pack/vivid/opt/Vivid.vim/autoload/vivid.vim'))
    silent !git clone https://github.com/axvr/Vivid.vim.git ~/.vim/pack/vivid/opt/Vivid.vim
endif

if has('vim_starting') || s:unify == 1
    "set rtp+=~/.vim/bundle/Vivid.vim
    packadd Vivid.vim
endif

if s:unify == 1
    " TODO set up Vivid to support changing the dirs
    "call vivid#set_install_dir($HOME . '/.vim/pack/vivid/opt')
endif

" TODO if using neovim add python integration

" Input Plugins below this line {{{

" Code formatting
Plugin 'rhysd/vim-clang-format'         " Format files using Clang

" Vim enhancements
"call vivid#add('rhysd/clever-f.vim',   { 'enabled': 1, })
"call vivid#add('jiangmiao/auto-pairs', { 'enabled': 1, }) " Smart brackets and quotes
Plugin 'rhysd/clever-f.vim',    { 'enabled': 1 }
Plugin 'jiangmiao/auto-pairs',  { 'enabled': 1 }
if has('nvim')
    call vivid#add('majutsushi/tagbar')    " Display Tags of a File Easily     <-- :help tagbar
endif

" Auto-complete
if has('nvim')
    " TODO check for python integration
    call vivid#add('Shougo/deoplete.nvim', { 'enabled': 1, })
    call vivid#add('Shougo/neco-vim',      { 'enabled': 1, }) " VimL completion
    call vivid#add('zchee/deoplete-clang', { 'enabled': 1, }) " Clang completion engine
    call vivid#add('Shougo/neco-syntax',   { 'enabled': 1, }) " Many languages simple completion engine
    call vivid#add('poppyschmo/deoplete-latex', { 'enabled': 1, }) " Experimental LaTeX auto-completion engine
    " TODO Python completion engine 'zchee/deoplete-jedi'
    " TODO Rust completion engine 'sebastianmarkow/deoplete-rust'
    " TODO others
    " TODO dependency installing plugin
else
    call vivid#add('ajh17/VimCompletesMe', { 'enabled': 1, })
    "call vivid#add('lifepillar/vim-mucomplete', { 'enabled': 1, })
endif

" Syntax checking (linting)
if has('nvim')
    call vivid#add('neomake/neomake', { 'enabled': 1, })
endif

" Git integration
call vivid#add('tpope/vim-fugitive', { 'enabled': 1, })             " Fugitive.Vim Git Wrapper Plugin   <-- :help fugitive
call vivid#add('airblade/vim-gitgutter')         " Show a Git Diff in the 'Gutter'   <-- :help GitGutter
call vivid#add('rhysd/committia.vim')            " More Pleasant Editing on Commit Message

" Syntax highlighting packs
call vivid#add('rust-lang/rust.vim')             " Rust Syntax Highlighting
call vivid#add('tomlion/vim-solidity')           " Solidity Syntax Highlighting
call vivid#add('lervag/vimtex')
call vivid#add('octol/vim-cpp-enhanced-highlight')
"Plugin 'sheerun/vim-polyglot'

" Colourschemes and themes
"Plugin 'mhinz/vim-startify', { 'enabled': 1, }
call vivid#add('liuchengxu/space-vim-dark', { 'enabled': 1, })
Plugin 'drzel/vim-line-no-indicator', { 'enabled': 1, }

" Input Plugins above this line }}}

call vivid#enable()

" -----------------------------------------------------------------------------

" Basic Configuration
" -------------------

" Essentials
filetype plugin indent on
syntax enable
set hidden

" Searching
set ignorecase                  " Ignore case in searches
set smartcase                   " Enables smart case mode
set hlsearch                    " Highlight all search results
set incsearch                   " Searches for strings incrementaly
set wrapscan                    " Wrap back to the start of the file

" Mode line
set modeline
set modelines=5

" Swap
if has('nvim') && s:unify == 0
    if !isdirectory($HOME . '/.config/nvim/swap')
        call mkdir($HOME . '/.config/nvim/swap', 'p')
    endif
    set directory=~/.config/nvim/swap
else
    if !isdirectory($HOME . '/.vim/swap')
        call mkdir($HOME . '/.vim/swap', 'p')
    endif
    set directory=~/.vim/swap
endif

" Undo
if has('persistent_undo')
    if has('nvim') && s:unify == 0
        if !isdirectory($HOME . '/.config/nvim/undo')
            call mkdir($HOME . '/.config/nvim/undo', 'p')
        endif
        set undodir=$HOME/.config/nvim/undo
    else
        if !isdirectory($HOME . '/.vim/undo')
            call mkdir($HOME . '/.vim/undo', 'p')
        endif
        set undodir=$HOME/.vim/undo
    endif
    set undofile
else
    set undolevels=1000
endif

" TODO set backup dir
set autoread
set showcmd
set confirm                     " confirmation prompts
set fileformats=unix,mac,dos
set mouse=a                     " Enable full mouse support
set updatetime=1000
set backspace=indent,eol,start  " Backspace behaviour: current line only
set history=100
set lazyredraw
set ruler                       " show row and col ruler info
set showmatch                   " Highlight matching brackets
set foldenable                  " Enable folding
set foldmethod=marker           " Set fold method to {{{ & }}}

" Vim & GVim styling
set number relativenumber " Show the line numbers
set laststatus=2
set cursorline " Highlight current line
let &colorcolumn=join(range(81,335), ",")
set visualbell t_vb=            " Disable sound & visual alerts
set showmode
" TODO statusline
" TODO localise this function
function! GitBranch() abort
    if vivid#enabled('vim-fugitive')
        let l:branch = fugitive#head()
        if l:branch != ""
            return "  " . l:branch . " "
        else
            return ""
        endif
    else
        return ""
    endif
endfunction
set statusline=%#LineNr#%{GitBranch()}      " Git branch name
set statusline+=%#StatusLine#\ %f%m%r%h%w   " Current file info
set statusline+=%=                          " Move to rightside of screen
set statusline+=%{&ff}\ \|\ %{&fileencoding?&fileencoding:&encoding}\ \|
set statusline+=\ %y\ \|
" TODO set colours
if vivid#enabled('vim-line-no-indicator')
    set statusline+=\ %{LineNoIndicator()}\ :%2c\  " sdojnf
else
    set statusline+=\ %p%%\ \|
    set statusline+=\ %04l:%04v\     " Vim ruler config
endif

set background=dark
colorscheme space-vim-dark
"hi Normal guibg=NONE ctermbg=NONE
if has('gui_running')
    " TODO use different font
    set guifont=Monospace\ 11
elseif !has('gui_running')
    set t_Co=256
endif
if has("termguicolors")
    set termguicolors
endif

" Vim Omnicomplete
autocmd BufNewFile,BufRead,BufEnter *.cpp,*.hpp
            \ set omnifunc=omni#cpp#complete#Main
set completeopt=longest,menuone,menu
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
            \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
            \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Wild menu
set wildmenu
set omnifunc=syntaxcomplete#Complete
set path+=**
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite


" -----------------------------------------------------------------------------

" Set Keymaps & Commands
" ----------------------

" Set Leader key
let g:mapleader = ","

" Spacemacs style leader keybindings
nnoremap <leader>fs :<C-u>w<CR>
" TODO add file browser (maybe the one built into Vim?)
nnoremap <leader>ff :<C-u><CR>
nnoremap <leader>ft :<C-u><CR>
nnoremap <leader>bb :<C-u>buffers<CR>:<C-u>buffer<Space>
nnoremap <leader>qq :<C-u>qa<CR>
nnoremap <leader>gs :<C-u>Gstatus<CR>
nnoremap <leader>gc :<C-u>Gcommit<CR>
nnoremap <leader>gd :<C-u>Gdiff<CR>
nnoremap <leader>ge :<C-u>Gedit<CR>
nnoremap <leader>gm :<C-u>Gmove<CR>
nnoremap <leader>gr :<C-u>Gdelete<CR>
nnoremap <leader>gb :<C-u>Gblame<CR>
nnoremap <leader>p  :<C-u><CR>
nnoremap <leader>'  :<C-u>terminal<CR>
inoremap <C-e>      <END>
vnoremap <C-e>      <END>
cnoremap <C-e>      <END>
inoremap <C-a>      <HOME>
vnoremap <C-a>      <HOME>
cnoremap <C-a>      <HOME>
" Spell check
nnoremap <leader>st :<C-u>setlocal spell! spelllang=en_gb<CR>
nnoremap <F7> :<C-u>setlocal spell! spelllang=en_gb<CR>
" Switch tabs using <FX> keys
nnoremap <F5> :<C-u>tabp<CR>
nnoremap <F6> :<C-u>tabn<CR>
" Make tags file using ctags
command! MakeTags !ctags -R .
" Clang format
" TODO remap '=' format to 'ClangFormat' for clang files
autocmd FileType c,h,cpp,hpp,cc,objc
            \ nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,h,cpp,hpp,cc,objc
            \ vnoremap <buffer><Leader>cf :ClangFormat<CR>

function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
    echo "Removed trailing whitespace"
  endif
endfunction
nnoremap <leader>rw :<C-u>call StripTrailingWhitespace()<CR>

function! s:delete_current_buf()
    let bufnr = bufnr('%')
    bnext
    if bufnr == bufnr('%') | enew | endif
    silent! bdelete! #
endfunction
nnoremap <leader>bd :<C-u>call <SID>delete_current_buf()<CR>

" Show Highlighting group for current word
function! s:syn_stack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction
nnoremap <leader>hg :call <SID>syn_stack()<CR>

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX files.
" TODO print more information
" TODO replace existing vim modeline
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
                \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :<C-u>call AppendModeline()<CR>

" Make file executable
if executable('chmod')
    function! s:add_permission_x() abort
        let file = expand('%:p')
        if getline(1) =~# '^#![^[]' && !executable(file)
            silent! call vimproc#system('chmod u+x ' . shellescape(file))
        endif
    endfunction
    autocmd BufWritePost * call s:add_permission_x()
endif

" Git stage file
function! s:git_add(fname) abort
    if ! filereadable(a:fname)
        echoerr 'file cannot be opened'
        return
    endif
    execute 'lcd' fnamemodify(a:fname, ':h')
    let result = system('git add '.a:fname)
    if v:shell_error
        echoerr 'failed to add: '.result
    else
        echo fnamemodify(a:fname, ':t') . ' is added:'
    endif
endfunction
command! -nargs=0 GitAdd call <SID>git_add(expand('%:p'))
nnoremap <silent><Leader>ga :<C-u>GitAdd<CR>


" -----------------------------------------------------------------------------

" Plugin Configurattion
" ---------------------

" Clever-f Config
let g:clever_f_smart_case = 1
let g:clever_f_across_no_line = 1

" Clang Format Config
" TODO Java, JavaScript, Obj-C, C
let g:clang_format#code_style = 'google'
let g:clang_format#detect_style_file = 1

" Neomake Config
if has('nvim')
    autocmd! BufWritePost * Neomake
    let g:neomake_c_enabled_makers = ['clang', 'gcc'] " TODO C test and configure
    let g:neomake_cpp_enabled_makers = ['clangtidy', 'cppcheck']
    let g:neomake_cpp_clangtidy_maker = {
                \ 'exe': 'clang-tidy',
                \ 'args': ['-checks=*'],
                \ }
    let g:neomake_python_enabled_makers = ['pylint', 'python'] " TODO Python3
    let g:neomake_perl_enabled_makers = ['perl']
    let g:neomake_rust_enabled_makers = ['rustc']
    let g:neomake_sh_enabled_makers = ['shellcheck']
endif

" Deoplete Config
if has('nvim')
    let g:deoplete#enable_at_startup = 1
    " Deoplete-Clang - find locations: https://github.com/zchee/deoplete-clang
    let g:deoplete#sources#clang#libclang_path = '/usr/lib64/libclang.so'
    let g:deoplete#sources#clang#clang_header = '/usr/lib64/clang'
endif


" -----------------------------------------------------------------------------

" File Specific Config
" --------------------

" TODO change on filetype
" TODO set good defaults
set expandtab     " et -- Change tabs into spaces
set shiftwidth=4  " sw
set softtabstop=4 " sts
set textwidth=80  " tw --
set tabstop=4     " ts

let &showbreak='>>> '           " Wrap broken line & prefix
set nolist                      " list disables linebreak
set wrapmargin=0                " Set wrap margin to zero
set shiftround
set smarttab
set linebreak                   " breaks lines at words (requires line wrap)
set autoindent                  " enable auto indentation
set cindent                     " C style indentation
set formatoptions+=t
set formatoptions-=l

" Text Files (text, tex, markdown, org, gitcommit, diff)
augroup text "{{{
    autocmd!
    autocmd FileType text,tex,markdown,org,gitcommit setlocal wrap linebreak nolist
    autocmd FileType text,tex,markdown,org,gitcommit setlocal textwidth=0 wrapmargin=0
    autocmd FileType text,tex,markdown,org,gitcommit setlocal spell spelllang=en_gb
    autocmd FileType text,tex,markdown,gitcommit,diff setlocal nofoldenable
    autocmd FileType org setlocal foldenable

    if exists('+breakindent')
        autocmd FileType text,tex,markdown,org,gitcommit,diff setlocal breakindent
    endif

    autocmd FileType text,tex,markdown,org,gitcommit let &l:colorcolumn=0
    autocmd FileType diff let &colorcolumn=join(range(82,335), ",")
    autocmd FileType text,tex,markdown,org,diff setlocal number norelativenumber
    autocmd FileType gitcommit setlocal nonumber norelativenumber
augroup END  "}}}

" Binary Files
" Change Vim into a hex editor
augroup binary "{{{
    au!
    au BufReadPre   *.bin let &bin=1
    au BufReadPost  *.bin if &bin | %!xxd
    au BufReadPost  *.bin set ft=xxd | endif
    au BufWritePre  *.bin if &bin | %!xxd -r
    au BufWritePre  *.bin endif
    au BufWritePost *.bin if &bin | %!xxd
    au BufWritePost *.bin set nomod | endif
augroup END "}}}

" GPG Encrypted Files
" Transparent editing of gpg encrypted files. By Wouter Hanegraaff.
augroup encrypted "{{{
    au!

    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp set viminfo=
    " We don't want a various options which write unencrypted data to disk
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp set noswapfile noundofile nobackup

    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp set bin
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp let ch_save = &ch|set ch=2
    " (If you use tcsh, you may need to alter this line.)
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp '[,']!gpg --decrypt 2> /dev/null

    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp set nobin
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp execute ":doautocmd BufReadPost " . expand("%:r")

    " Convert all text to encrypted text before writing
    " (If you use tcsh, you may need to alter this line.)
    autocmd BufWritePre,FileWritePre *.gpg,*.asc,*.pgp '[,']!gpg --default-recipient-self -ae 2>/dev/null
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost *.gpg,*.asc,*.pgp u
augroup END "}}}


" vim: set ts=8 sw=4 tw=80 et :
