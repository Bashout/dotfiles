" Vim Configuration File (~/.vimrc)
" =================================

" Brief help
" ----------
" :PluginInstall    - Install new plugins
" :PluginClean      - Remove unused plugins
" :PluginUpgrade    - Update installed plugins
" :source $MYVIMRC  - Load latest version of '$MYVIMRC'

" -----------------------------------------------------------------------------
" TODO indentation & tabs
" TODO built in vim linting (:make & :quickfix also use vim-qf)
" TODO set up ins-complete & omnicomplete & learn how to use it
" TODO spelling fix / correction keymap (maybe list corrections)
" TODO vim sessions keymaps
" -----------------------------------------------------------------------------

" Make sure the file is readable
if !1 | finish | endif

if &compatible
    set nocompatible
endif

" Make vim and neovim use same info (e.g. undo & swap files)
let s:unify = 1

" Encoding
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

function! s:get_SID()
    return matchstr(expand('<sfile>'), '<SNR>\d\+_zeget_SID$')
endfunction
let s:SID = s:get_SID()
delfunction s:get_SID


" -----------------------------------------------------------------------------

" Plugin Setup
" ------------

" TODO replace with the finished cross platform version
if !filereadable(expand($HOME . '/.vim/pack/vivid/opt/Vivid.vim/autoload/vivid.vim'))
    silent !git clone https://github.com/axvr/Vivid.vim.git ~/.vim/pack/vivid/opt/Vivid.vim
endif

if has('vim_starting') || s:unify == 1
    packadd Vivid.vim
endif

if s:unify == 1
    " TODO set up Vivid to support changing the dirs
    "call vivid#set_install_dir($HOME . '/.vim/pack/vivid/opt')
endif

" TODO if using neovim check and add python integration

" Input Plugins below this line {{{

" Vim enhancements
Plugin 'rhysd/clever-f.vim',   { 'enabled': 1, }
Plugin 'jiangmiao/auto-pairs', { 'enabled': 1, }
Plugin 'tommcdo/vim-lion',     { 'enabled': 1, }
Plugin 'wellle/targets.vim',   { 'enabled': 1, }
Plugin 'romainl/vim-cool',     { 'enabled': 1, }
Plugin 'romainl/vim-qf'
Plugin 'justinmk/vim-dirvish', { 'enabled': 1, }

" Git integration
Plugin 'tpope/vim-fugitive'
Plugin 'rhysd/committia.vim'
Plugin 'airblade/vim-gitgutter'

" Syntax highlighting packs & code formatting
Plugin 'rhysd/vim-clang-format'
Plugin 'lervag/vimtex'
Plugin 'sheerun/vim-polyglot', { 'enabled': 1, }

" Colourschemes and themes
Plugin 'liuchengxu/space-vim-dark', { 'enabled': 1, }

" Input Plugins above this line }}}


" Git Plugin Enabling
function! s:enable_git_plugins() abort
    if system('git rev-parse --is-inside-work-tree') =~ '^true'
        call vivid#enable('vim-fugitive', 'committia', 'vim-gitgutter')
    endif
endfunction

augroup plugins
    autocmd!
    autocmd BufReadPre,BufReadPost,VimEnter * call s:enable_git_plugins() " TODO improve & optimise this
    autocmd FileType c,h,cpp,hpp,cc,objc call vivid#enable('vim-clang-format')
    autocmd FileType tex call vivid#enable('vimtex')
augroup END


" -----------------------------------------------------------------------------

" Basic Configuration
" -------------------

" Essentials
filetype plugin indent on
if !exists("g:syntax_on")
    syntax enable
endif
"set hidden

" Searching
set ignorecase      " Ignore case in searches
set smartcase       " Enables smart case mode
set hlsearch        " Highlight all search results
set incsearch       " Searches for strings incrementaly
set wrapscan        " Wrap back to the start of the file

" Mode line
set modeline        " Allow reading modelines
set modelines=5     " Set the number of lines to search through to find modeline

" Backup, Swap & Undo files {{{
let s:dirs = ['', '', '']
if has('nvim') && s:unify == 0
    let s:dirs[0] = expand($HOME . '/.config/nvim/backup')
    let s:dirs[1] = expand($HOME . '/.config/nvim/swap')
    let s:dirs[2] = expand($HOME . '/.config/nvim/undo')
else
    let s:dirs[0] = expand($HOME . '/.vim/backup')
    let s:dirs[1] = expand($HOME . '/.vim/swap')
    let s:dirs[2] = expand($HOME . '/.vim/undo')
endif
for s:dir in s:dirs
    if !isdirectory(s:dir)
        call mkdir(s:dir, 'p')
    endif
endfor
let &backupdir = s:dirs[0]
set backup
let &directory = s:dirs[1]
if has('persistent_undo')
    let &undodir = s:dirs[2]
    set undofile
else
    set undolevels=1000
endif
unlet s:dirs  " }}}

set autoread
set showcmd
set confirm
set fileformats=unix,mac,dos
set mouse=a
set updatetime=1000
set backspace=indent,eol,start
set history=100
set lazyredraw
set ruler
set showmatch
set foldenable
set foldmethod=marker

" Vim & GVim styling
set number relativenumber
set laststatus=2
set cursorline " Highlight current line
let &colorcolumn=join(range(81,335), ",")
set visualbell t_vb=   " Disable sound & visual alerts
set showmode
" TODO localise this function
function! GitBranch() abort
    if vivid#enabled('vim-fugitive') && fugitive#head() != ""
        return "  " . fugitive#head() . " "
    else | return ""
    endif
endfunction
set statusline=%#LineNr#%{GitBranch()}      " Git branch name
set statusline+=%#StatusLine#\ %f%m%r%h%w   " Current file info
set statusline+=%=                          " Move to rightside of screen
set statusline+=%{&ff}\ \|
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}\ \|
set statusline+=\ %y\ \|
set statusline+=\ %p%%\ \|
set statusline+=\ %2v\     " Vim ruler config

set background=dark
if vivid#enabled('space-vim-dark')
    colorscheme space-vim-dark
else
    colorscheme desert
    set nocursorline
    let &colorcolumn=0
endif
"hi Normal guibg=NONE ctermbg=NONE
if has('gui_running')
    set guifont=Monospace\ 11
elseif !has('gui_running')
    set t_Co=256
endif
if has("termguicolors")
    set termguicolors
endif

" TODO Vim Omnicomplete & ins-complete
set completeopt+=longest,menuone,noinsert,noselect
set shortmess-=c
set belloff+=ctrlg
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
            \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
            \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
autocmd BufNewFile,BufRead,BufEnter *.cpp,*.hpp
            \ set omnifunc=omni#cpp#complete#Main

" Wild menu
set wildmenu
set omnifunc=syntaxcomplete#Complete
set path+=**
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite


" -----------------------------------------------------------------------------

" Set Keymaps & Commands
" ----------------------

" Set Leader key
"let g:mapleader = ","

" Spacemacs style leader keybindings
nnoremap <leader>fs :<C-u>w<CR>
" TODO set up dirvish
nnoremap <leader>ff :<C-u><CR>
nnoremap <leader>ft :<C-u><CR>
nnoremap <leader>bb :<C-u>buffers<CR>:<C-u>buffer<Space>
nnoremap <leader>qq :<C-u>qa<CR>
nnoremap <leader>gs :<C-u>Gstatus<CR>
nnoremap <leader>gc :<C-u>Gcommit<CR>
nnoremap <leader>gd :<C-u>Gdiff<CR>
nnoremap <leader>ge :<C-u>Gedit<CR>
nnoremap <leader>gm :<C-u>Gmove<CR>
nnoremap <leader>gr :<C-u>Gdelete<CR>
nnoremap <leader>gb :<C-u>Gblame<CR>
nnoremap <leader>p  :<C-u><CR>
nnoremap <leader>'  :<C-u>terminal<CR>
" Spell check
nnoremap <leader>st :<C-u>setlocal spell! spelllang=en_gb<CR>
nnoremap <F7> :<C-u>setlocal spell! spelllang=en_gb<CR>
" Switch tabs using <FX> keys
nnoremap <F5> :<C-u>tabp<CR>
nnoremap <F6> :<C-u>tabn<CR>
" Make tags file using ctags
command! -nargs=0 MakeTags !ctags -R .
nnoremap <leader>tm :<C-u>MakeTags<CR>
" Clang format
autocmd FileType c,h,cpp,hpp,cc,objc
            \ nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,h,cpp,hpp,cc,objc
            \ vnoremap <buffer><Leader>cf :ClangFormat<CR>
autocmd FileType c,h,cpp,hpp,cc,objc
            \ xnoremap <buffer>= :ClangFormat<CR>

" Vim autocomplete
inoremap <silent> <leader>f <C-x><C-f>
inoremap <silent> <leader>i <C-x><C-i>
inoremap <silent> <leader>l <C-x><C-l>
inoremap <silent> <leader>n <C-x><C-n>
inoremap <silent> <leader>o <C-x><C-o>
inoremap <silent> <leader>t <C-x><C-]>
inoremap <silent> <leader>u <C-x><C-u>

function! StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<CR>
        normal `z
        echo "Removed trailing whitespace"
    endif
endfunction
nnoremap <leader>rw :<C-u>call StripTrailingWhitespace()<CR>

function! s:delete_current_buf()
    let bufnr = bufnr('%')
    bnext
    if bufnr == bufnr('%') | enew | endif
    silent! bdelete! #
endfunction
nnoremap <leader>bd :<C-u>call <SID>delete_current_buf()<CR>

" Show Highlighting group for current word
function! s:syn_stack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction
nnoremap <leader>hg :call <SID>syn_stack()<CR>

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX files.
" TODO replace existing vim modeline
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set ft=%s fdm=%s fmr=%s :",
                \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no',
                \ &filetype, &foldmethod, &foldmarker)
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :<C-u>call AppendModeline()<CR>

" Git stage file
function! s:git_add(fname) abort
    if ! filereadable(a:fname)
        echoerr 'file cannot be opened'
        return
    endif
    execute 'lcd' fnamemodify(a:fname, ':h')
    let result = system('git add '.a:fname)
    if v:shell_error
        echoerr 'failed to stage: '.result
    else
        echo fnamemodify(a:fname, ':t') . ' was staged'
    endif
endfunction
command! -nargs=0 -bar GitAdd call <SID>git_add(expand('%:p'))
nnoremap <silent><Leader>ga :<C-u>GitAdd<CR>


" -----------------------------------------------------------------------------

" Plugin Configurattion
" ---------------------

" Clever-f Config
let g:clever_f_smart_case = 1
let g:clever_f_across_no_line = 1

" Clang Format Config
" TODO Java, JavaScript, Obj-C, C
let g:clang_format#code_style = 'google'
let g:clang_format#detect_style_file = 1

" Lion Config
let g:lion_squeeze_spaces = 1

" Neomake Config {{{
" TODO replace with :make and :quickfix
if vivid#enabled('neomake') && has('nvim')
    autocmd! BufWritePost * Neomake
    let g:neomake_c_enabled_makers = ['clang', 'gcc'] " TODO C test and configure
    let g:neomake_cpp_enabled_makers = ['clangtidy', 'cppcheck']
    let g:neomake_cpp_clangtidy_maker = {
                \ 'exe': 'clang-tidy',
                \ 'args': ['-checks=*'],
                \ }
    let g:neomake_python_enabled_makers = ['pylint', 'python'] " TODO Python3
    let g:neomake_perl_enabled_makers = ['perl']
    let g:neomake_rust_enabled_makers = ['rustc']
    let g:neomake_sh_enabled_makers = ['shellcheck']
endif   " }}}


" -----------------------------------------------------------------------------

" File Specific Config
" --------------------

set expandtab     " et -- Change tabs into spaces
set shiftwidth=4  " sw
set softtabstop=4 " sts
set textwidth=80  " tw --
set tabstop=8     " ts -- Don't change this value

let &showbreak='>>> ' " Wrap broken line & prefix
set nolist            " list disables linebreak
set wrapmargin=0      " Set wrap margin to zero
set shiftround
set smarttab
set linebreak         " breaks lines at words (requires line wrap)
set autoindent        " enable auto indentation
set cindent           " C style indentation
set formatoptions+=t  " TODO check these settings
set formatoptions-=l

" Text Files (text, tex, markdown, org, gitcommit, diffm
augroup text "{{{
    autocmd!
    autocmd FileType text,tex,markdown,org,gitcommit,html,css
                \ setlocal wrap linebreak nolist
    autocmd FileType text,tex,markdown,org,gitcommit,html,css
                \ setlocal textwidth=0 wrapmargin=0
    autocmd FileType text,tex,markdown,org,gitcommit,html,css
                \ setlocal spell spelllang=en_gb
    autocmd FileType text,tex,markdown,gitcommit,diff setlocal nofoldenable
    autocmd FileType org setlocal foldenable

    if exists('+breakindent')
        autocmd FileType text,tex,markdown,org,gitcommit,diff,html,css
                    \ setlocal breakindent
    endif

    autocmd FileType text,tex,markdown,org,gitcommit,html,css
                \ let &l:colorcolumn=0
    autocmd FileType diff
                \ let &colorcolumn=join(range(82,335), ",")
    autocmd FileType text,tex,markdown,org,diff
                \ setlocal number norelativenumber
    autocmd FileType gitcommit setlocal nonumber norelativenumber
augroup END  "}}}

" Binary Files
" Change Vim into a hex editor
augroup binary "{{{
    autocmd!
    autocmd BufReadPre   *.bin let &bin=1
    autocmd BufReadPost  *.bin if &bin | %!xxd
    autocmd BufReadPost  *.bin set ft=xxd | endif
    autocmd BufWritePre  *.bin if &bin | %!xxd -r
    autocmd BufWritePre  *.bin endif
    autocmd BufWritePost *.bin if &bin | %!xxd
    autocmd BufWritePost *.bin set nomod | endif
augroup END "}}}

" GPG Encrypted Files
" Transparent editing of gpg encrypted files. By Wouter Hanegraaff.
augroup encrypted "{{{
    autocmd!

    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp set viminfo=
    " We don't want a various options which write unencrypted data to disk
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp set noswapfile noundofile nobackup

    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp set bin
    autocmd BufReadPre,FileReadPre *.gpg,*.asc,*.pgp let ch_save = &ch|set ch=2
    " (If you use tcsh, you may need to alter this line.)
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp '[,']!gpg --decrypt 2> /dev/null

    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp set nobin
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost *.gpg,*.asc,*.pgp execute ":doautocmd BufReadPost " . expand("%:r")

    " Convert all text to encrypted text before writing
    " (If you use tcsh, you may need to alter this line.)
    autocmd BufWritePre,FileWritePre *.gpg,*.asc,*.pgp '[,']!gpg --default-recipient-self -ae 2>/dev/null
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost *.gpg,*.asc,*.pgp u
augroup END "}}}


" vim: set ts=8 sw=4 tw=80 et ft=vim fdm=marker fmr={{{,}}} :
