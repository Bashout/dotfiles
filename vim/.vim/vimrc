" =============================================================
" Description:  Main Vim Configuration File
" File:         ~/.vim/vimrc
" =============================================================
" Brief Help:
"   :PluginInstall      - Install uninstalled plugins
"   :PluginUpgrade      - Update installed plugins
"   :mks[ession] path   - Create a session
"   :so[urce] path      - Load a session or Vim Script
" =============================================================
" Dependencies:
"   LaTeX:      latexmk & pdflatex
"   Perl:       perl
"   Shell:      ShellCheck
"   C Based:    clang-tidy (-checks=*), clang, gcc, gcc-c++ (g++)
"   CSharp:     dotnet, omnisharp
"   Python:     pylint, python3, python2
"   Build:      make, cmake, etc
"   Tools:      ctags
" =============================================================


" Essentials
set encoding=utf-8
filetype plugin indent on
if !exists('g:syntax_on')
    syntax enable
endif
set hidden
set autoread
set mouse=a
set backspace=indent,eol,start
set spelllang=en_gb
set lazyredraw
set showmatch

" Searching
set ignorecase      " Ignore case in searches
set smartcase       " Enables smart case mode
set hlsearch        " Highlight all search results
set incsearch       " Searches for strings incrementally
set wrapscan        " Wrap back to the start of the file

" Backup, Swap & Undo files
let s:dirs = ['', '', '']
let s:dirs[0] = expand($HOME . '/.vim/backup')
let s:dirs[1] = expand($HOME . '/.vim/swap')
let s:dirs[2] = expand($HOME . '/.vim/undo')
for s:dir in s:dirs
    if !isdirectory(s:dir)
        call mkdir(s:dir, 'p')
    endif
endfor
let &backupdir = s:dirs[0]
set backup
let &directory = s:dirs[1]
if has('persistent_undo')
    let &undodir = s:dirs[2]
    set undofile
else
    set undolevels=1000
endif
unlet s:dirs

" Set leader keymaps
let mapleader = "\<Space>"
let maplocalleader = ","

" Vim Omnicomplete, Ins-complete & Wild menu
set omnifunc=syntaxcomplete#Complete
set wildmenu
set wildignore+=*/tmp/*,*.so,*.pyc,*.db,*.sqlite
set path+=**

" Indentation config (spaces > tabs)
set tabstop=8       " ts  -- Don't change this value
set softtabstop=4   " sts -- Number of spaces = to a tab
set shiftwidth=4    " sw  -- Number of spaces used for indenting
set expandtab       " et  -- Change tabs into spaces
set shiftround      " sr  -- Round indent to multiple of sw
set autoindent      " ai  -- Enable unobtrusive auto-indentation

" Line wrap config (Use soft wrap for code, and hard wrap for comments and text)
let &showbreak='+++ '   " Prefix for soft wrapped line
set textwidth=80        " Maximum width of text
set wrapmargin=0        " Set wrap margin on right of screen
set wrap                " Enable line wrap
set linebreak           " Breaks lines at words
set nolist              " List disables linebreak
if exists('+breakindent')
    set breakindent     " Set wrapped text to visually indent
endif

